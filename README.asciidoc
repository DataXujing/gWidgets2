Rewrite of gWidgets.

Why?

* should be much faster (early benchmarking is about 10-100% as
  fast). The gWidgets package had a cumbersome dispatch mechanism
  based on S4 methods. This rewrite uses a lighter-weight S3 dispatch
  and reference classes.

  The gbutton function calls .gbutton (an S3 generic) which dispatches
  on the value of toolkit. In the toolkit packages, a
  .gbutton.guiWidgetsToolkitRGtk2 method is defined, say . This would
  basically call GButton$new(...), where GButton is a reference class
  where all the hard work is done. As the GButton class is not
  exported, only the one in the toolkit is found.

  New toolkits can be added, and work independently: just provide the
  S3 methods, and the underlying reference classes. These reference
  classes have many prescribed method names, as the methods to
  interact with the objects expect a given interface. The basic
  interface is provided in an exported class to derive a subclass from

* Should be easier to maintain. The documentation will be done with
  roxygen2. The old version was by hand. It required some tedious
  stuff, best left unsaid. 

* The code in the toolkit implementations needed cleaning up. Lots of
  it. This rewrite gives reason to do so.

* rethinking some of the arguments, functions. I don't think we need
  gcommandline, gformlayout, ggenericwidget, etc. These are best left
  to a separate package, if at all. (Personally, the traitr package
  does the last two better, and gcommandline just isn't very good.)

* putting more structure on the toolkit. Before the class structure
  was left alone, leaving open the possibility that it could be made
  better (by someone else). Well, it wasn't. By enforcing a class
  structure with specific method names in the toolkit packages the
  code becomes more consistent. It should also make it easier for users
  to derive subclasses

* adding in some other features. For example, gtimer, gstackwidget so far.

